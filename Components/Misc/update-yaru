#!/bin/bash
runDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
callDir="$(pwd)"

checkDeps() {
if [[ "$1" == "unstable" ]]; then
  if ! git --version > /dev/null 2>&1; then
    echo "Git missing"
    exit
  fi
fi
if [[ "$1" == "manual" ]]; then
  unzip --version > /dev/null 2>&1
  if [[ "$?" != "10" ]]; then
    echo "Unzip missing"
    exit
  fi
  if ! tar --version > /dev/null 2>&1; then
    echo "tar missing"
    exit
  fi
fi
if [[ "$1" == "unstable" ]] || [[ "$1" == "manual" ]]; then
  if ! meson --version > /dev/null 2>&1; then
    echo "Meson missing"
    exit
  fi
    if ! sassc --version > /dev/null 2>&1; then
    echo "Sassc missing"
    exit
  fi
elif [[ "$1" == "setup" ]]; then
  if ! gsettings --version > /dev/null 2>&1; then
    echo "Gesttings missing"
    exit
  fi
fi
}

updateYaru() {
  if [[ "$1" == "unstable" ]]; then
    read -r -p "Yaru will be updated to an unstable version. Are you sure? [y/N] " response
    if ! [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      echo "Cancelled"
      exit
    fi
    installYaru "unstable"
    return
  elif [[ "$1" == "manual" ]]; then
    installYaru "manual" "$2"
    return
  elif [[ "$1" == "setup" ]]; then
    installYaru "setup"
    return
  fi
}

installYaru() {
  if [[ -d "/tmp/update-yaru" ]] && [[ ! -w "/tmp/update-yaru" ]]; then
    echo "/tmp/update-yaru is unwritable"
    exit
  else
    if [[ ! -d "/tmp/update-yaru" ]]; then
      mkdir /tmp/update-yaru
    fi
    cd /tmp/update-yaru
  fi

  if [[ "$1" != "setup" ]]; then
    echo "Installing yaru:"
  else
    echo "Setting up yaru..."
  fi

  if [[ "$1" == "unstable" ]]; then
    yaruDir="yaru"
    git clone https://github.com/ubuntu/yaru.git
  elif [[ "$1" == "manual" ]]; then
    yaruPackage="$2"
    cp "$callDir/$yaruPackage" /tmp/update-yaru/
    if [[ "$yaruPackage" == *".tar.gz"* ]]; then
      yaruDir=${yaruPackage//.tar.gz}
      tar -xf "$yaruPackage"
    elif [[ "$yaruPackage" == *".tar.gz"* ]]; then
      yaruDir=${yaruPackage//.zip}
      unzip "$yaruPackage"
    else
      echo "Not a .tar.gz or .zip"
      exit
    fi
  elif [[ "$1" == "setup" ]]; then
    if gsettings list-schemas |grep user-theme > /dev/null 2>&1; then
      gsettings set org.gnome.shell.extensions.user-theme name Yaru-dark
    else
      schemasPath=$(find / -iname 'gschemas.compiled' 2>&1 |grep -v "Permission denied" |grep user-theme@gnome-shell-extensions.gcampax.github.com)
      if [[ "$schemasPath" == "" ]]; then
        echo "User-themes not installed correctly, or an error occured"
        return
      fi
      gsettings --schemadir "${schemasPath///gschemas.compiled}" set org.gnome.shell.extensions.user-theme name Yaru-dark
    fi

    gsettings set org.gnome.desktop.interface gtk-theme Yaru-dark
    gsettings set org.gnome.desktop.interface icon-theme Yaru
    gsettings set org.gnome.desktop.sound theme-name Yaru
    gsettings set org.gnome.desktop.interface cursor-theme Yaru
  fi

  if [[ -d "/tmp/update-yaru/$yaruDir" ]] && [[ "$1" != "setup" ]]; then
    cd "$yaruDir"
    meson build
    cd build
    sudo rm -rf /usr/share/themes/Yaru*
    sudo ninja install
    cd ../../
    sudo rm -rf "$yaruDir"
    if [[ -f "/tmp/update-yaru/$yaruPackage" ]]; then
      rm "/tmp/update-yaru/$yaruPackage"
    fi
  elif [[ "$1" != "setup" ]]; then
    echo "An unexpected error occured"
  fi
  echo ""; echo "----------------------------"; echo ""
  if [[ "$1" == "unstable" ]] || [[ "$1" == "manual" ]]; then
    echo "  Installed / updated yaru"
  elif [[ "$1" == "setup" ]]; then
    echo "    Yaru setup successful"
  fi
  echo ""; echo "----------------------------"
}

if [[ "$@" != "" ]]; then
  case $1 in
    -h|--help) echo "Usage: update-yaru [-OPTION]"; echo "Help:"; echo "-h | --help                 : Display this help page"; echo "-u | --unstable             : Update yaru to latest unstable version"; echo "-m | --manual [yaru-xx.zip] : Update yaru from .tar.gz or .zip"; echo "-s | --setup                : Set yaru-dark as the active theme"; echo ""; echo "Program written by: Dragon8oy"; exit;;
  -u|--unstable) checkDeps "unstable"; updateYaru "unstable"; exit;;
  -m|--manual) checkDeps "manual"; updateYaru "manual" "$2"; exit;;
  -s|--setup) checkDeps "setup"; updateYaru "setup"; exit;;
  *) echo "Unknown parameter passed: $1"; exit 1;;
  esac
else
  echo "No argument specified"
  "$runDir/"update-yaru --help
fi
