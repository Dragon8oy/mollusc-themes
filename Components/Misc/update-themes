#!/bin/bash
checkDeps() {
  if [[ "$1" == "stable" ]]; then #Check for unzip or tar if installing stable
    if ! command -v unzip > /dev/null 2>&1 && ! command -v tar > /dev/null 2>&1; then
      echo "Both, unzip and tar are missing, one required"
      depMissing="true"
    fi
  fi
  if ! command -v gsettings > /dev/null 2>&1; then #Check for dependencies to setup the themes
    echo "Gsettings missing"
    depMissing="true"
  fi
  if ! gsettings list-schemas |grep user-theme > /dev/null 2>&1; then
    echo -n "Searching for User Themes..."
    schemasPath=$(find / -iname 'gschemas.compiled' 2>&1 |grep -v "Permission denied" |grep user-theme@gnome-shell-extensions.gcampax.github.com)
    echo " Done"
    if [[ "$schemasPath" == "" ]]; then
      echo "User Themes extension missing"
      depMissing="true"
    fi
  fi

  if [[ "$1" == "unstable" ]] || [[ "$1" == "stable" ]]; then #Check for build dependencies
    if ! command -v sed > /dev/null 2>&1; then
      echo "Sed missing"
      depMissing="true"
    fi
    if ! git --version > /dev/null 2>&1; then
      echo "Git missing"
      depMissing="true"
    fi
    if ! command -v meson > /dev/null 2>&1; then
      echo "Meson missing"
      depMissing="true"
    fi
    if ! command -v sassc > /dev/null 2>&1; then
      echo "Sassc missing"
      depMissing="true"
    fi
    if [[ ! -d "/usr/include/gtk-3.0/" ]]; then
      echo "libgtk-3-dev missing"
      depMissing="true"
    fi
  fi

  if [[ "$depMissing" == "true" ]]; then
    echo "1 or more dependencies are missing, please install them and try again"
    exit 1
  fi
}

confirm() {
  read -r -p "$1" response
  if ! [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    echo "Cancelled"
    exit
  fi
}

completedMessage() {
  if [[ "$1" == "install" ]]; then
    echo -e "----------------------------\n"
    echo -e "   Themes update complete\n"
    echo "----------------------------"
  elif [[ "$1" == "setup" ]]; then
    echo -e "---------------------------\n"
    echo -e "   Themes setup complete\n"
    echo "---------------------------"
  fi
}

setupThemes() {
  if gsettings list-schemas |grep user-theme > /dev/null 2>&1; then
    gsettings set org.gnome.shell.extensions.user-theme name Yaru-dark
  else
    schemasPath=$(find / -iname 'gschemas.compiled' 2>&1 |grep -v "Permission denied" |grep user-theme@gnome-shell-extensions.gcampax.github.com)
    if [[ "$schemasPath" == "" ]]; then
      echo "User-themes not installed correctly, or an error occured"
      return
    fi
    gsettings --schemadir "${schemasPath///gschemas.compiled}" set org.gnome.shell.extensions.user-theme name Yaru-dark
  fi
  gsettings set org.gnome.desktop.interface gtk-theme Yaru-dark
  gsettings set org.gnome.desktop.interface icon-theme Argon
  gsettings set org.gnome.desktop.sound theme-name Yaru
  gsettings set org.gnome.desktop.interface cursor-theme Yaru
}

prepareBuild() {
  if [[ -d "/tmp/update-themes" ]] && [[ ! -w "/tmp/update-themes" ]]; then
    echo "/tmp/update-themes is unwritable"
    exit
  else
    mkdir -p /tmp/update-themes; cd /tmp/update-themes || exit 1
  fi
}

cleanBuild() {
  cd /tmp || exit 1
  sudo rm -rf /tmp/update-themes
}

updateYaru() {
  prepareBuild
  if [[ "$1" == "unstable" ]]; then
    yaruDir="yaru"
    git clone --depth 1 https://github.com/ubuntu/yaru.git
  elif [[ "$1" == "stable" ]]; then
    latestVersion="$(git ls-remote --refs --tags --sort="v:refname" https://github.com/ubuntu/yaru.git |grep -v "tags/r[0-9]" |tail -n1)"
    latestVersion="${latestVersion##*tags/}"

    downloadUrl="https://github.com/ubuntu/yaru/archive/$latestVersion"
    if command -v tar > /dev/null 2>&1; then
      extractCommand="tar -xf $latestVersion.tar.gz"
      downloadUrl="$downloadUrl.tar.gz"
    elif command -v unzip > /dev/null 2>&1; then
      extractCommand="unzip $latestVersion.zip"
      downloadUrl="$downloadUrl.zip"
    fi
    curl --progress-bar -O -L "$downloadUrl"
    $extractCommand

    rm "$latestVersion".*
    yaruDir="yaru-$latestVersion"
  fi
  if [[ -d "/tmp/update-themes/$yaruDir" ]]; then
    cd "$yaruDir" || exit 1
    sudo rm -rf /usr/share/themes/Yaru*
    sudo ./bootstrap.sh -b
  fi
}

updateArgon() {
  prepareBuild
  if [[ "$1" == "unstable" ]]; then
    argonDir="argon-icon-theme"
    git clone --depth 1 https://github.com/Dragon8oy/argon-icon-theme.git
  elif [[ "$1" == "stable" ]]; then
    latestVersion="$(git ls-remote --refs --tags --sort="v:refname" https://github.com/Dragon8oy/argon-icon-theme.git |tail -n1)"
    latestVersion="${latestVersion##*tags/}"

    downloadUrl="https://github.com/Dragon8oy/argon-icon-theme/archive/$latestVersion"
    if command -v tar > /dev/null 2>&1; then
      extractCommand="tar -xf $latestVersion.tar.gz"
      downloadUrl="$downloadUrl.tar.gz"
    elif command -v unzip > /dev/null 2>&1; then
      extractCommand="unzip $latestVersion.zip"
      downloadUrl="$downloadUrl.zip"
    fi
    curl --progress-bar -O -L "$downloadUrl"
    $extractCommand

    rm "$latestVersion".*
    argonDir="argon-icon-theme-${latestVersion/v}"
  fi
  if [[ -d "/tmp/update-themes/$argonDir" ]]; then
    cd "$argonDir" || exit 1
    sudo make uninstall
    make index
    sudo make install; sudo make refresh
  fi
}

updateTela() {
  prepareBuild
  if [[ "$1" == "unstable" ]]; then
    telaDir="grub2-themes"
    git clone --depth 1 https://github.com/vinceliuice/grub2-themes.git
  elif [[ "$1" == "stable" ]]; then
    latestVersion="$(git ls-remote --refs --tags --sort="v:refname" https://github.com/vinceliuice/grub2-themes.git |tail -n1)"
    latestVersion="${latestVersion##*tags/}"

    downloadUrl="https://github.com/vinceliuice/grub2-themes/archive/$latestVersion"
    if command -v tar > /dev/null 2>&1; then
      extractCommand="tar -xf $latestVersion.tar.gz"
      downloadUrl="$downloadUrl.tar.gz"
    elif command -v unzip > /dev/null 2>&1; then
      extractCommand="unzip $latestVersion.zip"
      downloadUrl="$downloadUrl.zip"
    fi
    curl --progress-bar -O -L "$downloadUrl"
    $extractCommand

    rm "$latestVersion".*
    telaDir="grub2-themes-$latestVersion"
  fi
  if [[ -d "/tmp/update-themes/$telaDir" ]]; then
    cd "$telaDir" || exit 1
    if [[ -f "backgrounds/1080p/background-tela.jpg" ]]; then
      sudo cp backgrounds/1080p/background-tela.jpg /boot/grub/splash0.jpg
    else
      echo "Tela background couldn't be found, please report this issue to Dragon8oy/dotfiles" 1>&2
      exit 1
    fi
    sudo ./install.sh --tela
  fi
}

updateThemes() {
  if [[ "$1" == "unstable" ]]; then
    confirm "Themes will be updated to unstable versions. Are you sure? [y/N] "
  fi
  checkDeps "$1"
  updateTela "$1"
  updateYaru "$1"
  updateArgon "$1"
  cleanBuild
  setupThemes
  completedMessage "install"
}

if [[ "$1" != "" ]]; then
  case $1 in
    -h|--help) echo "Usage: update-themes [-OPTION]"; \
    echo "Help:"; \
    echo "-h | --help                 : Display this help page"; \
    echo "-u | --unstable             : Update themes to latest unstable versions"; \
    echo "-s | --stable               : Update themes to latest stable versions"; \
    echo "Program written by: Dragon8oy"; exit;;
  -u|--unstable) updateThemes "unstable"; exit;;
  -i|--install|--stable) updateThemes "stable"; exit;;
  *) echo "Unknown parameter passed: $1"; exit 1;;
  esac
else
  echo "No argument specified"
  "$(dirname "${BASH_SOURCE[0]}")/update-themes" "--help"
fi
